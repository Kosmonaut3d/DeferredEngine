Rendering ideas:

Screen Space Emissive

- draw Diffuse to the SSAO buffer at half or quarter res (and then upscale to half) -> perform bilateral blur on both things in one pass

Screen Space Ambient Occlusion

- use second color for screen space reflection occlusion (rays = reflect(viewDir, normal)) to cut cubemap reflections from these areas.

Light View Space Global Illumination

- have a projector calculate global illumination in its view space - then project onto screen space.

- blur the VSM shadows once per frame until blurred enough...

TODO:

- Integrate the physics system better into the lighting system so it doesnot update when the position doesn't change any more.

- Integrate LUTs/Color Correction into the post processing step instead of yet another rendertarget usage.

- is lighting using depth buffer? (draw frontside of spheres when camera not inside)

- "Firefly Reduction" needs to account for blending, right now it can possibly darken the ssr (see only reflective groundplane and object)

//Unreal MartinM_GDC11_DX11_presentation.pdf
- Barely documented but very useful: 
	– HLSL Semantic SV_SampleIndex Used as input causes the shader to run per MSAA sample. 
	Can be used intexture.Load(float2(u,v),SampleIndex) 
	orEvaluateAttributeAtSample(Interpolator,SampleIndex) 
	 HLSL Semantic SV_Coverage uint, MSAA bit mask, PS input and output 

- check out:
https://github.com/kode80/kode80SSR/blob/master/Assets/Resources/Shaders/SSR.shader